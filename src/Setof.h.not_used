
// DECIDED NOT TO USE std::set, as we only need to track a list.  We don't need "lookup" functionality.

// LUNset.h

#include <set>

#include "LUN.h"
#include "Select.h"
#include "ivymaster.h"

class Setof_pLUN 
{
// variables
	std::set<LUN*> pointer_set;

// methods

static	FilterUsingSelect(Setof_p_LUN* fromSet, Select* p_Select, Setof_pLUN* toSet);

	Setof_pLUN() 
		{};

	Setof_pLUN(Setof_pLUN* fromSet, Select* pSelect)
		{Setof_pLUN::FilterUsingSelect(fromSet, pSelect, this);}

	copy(Setof_pLUN* p_other)
		{if (this == p_other) return; this.erase(); for (auto& pLUN : p_other->pointer_set) pointer_set.insert(pLUN);}

	std::string toString();
};

class SetOf_pMasterLUNthread
{
// variables
	std::set<MasterLUNthread*> pointer_set;

// methods

static	FilterUsingSelect(Setof_p_MasterLUNthread* fromSet, Select* p_Select, Setof_pMasterLUNthread* toSet);

	Setof_pMasterLUNthread() 
		{};

	Setof_pMasterLUNthread(Setof_pMasterLUNthread* fromSet, Select* pSelect)
		{Setof_pMasterLUNthread::FilterUsingSelect(fromSet, pSelect, this);}

	copy(Setof_pMasterLUNthread* p_other)
		{if (this == p_other) return; this.erase(); for (auto& pMasterLUNthread : p_other->pointer_set) pointer_set.insert(pMasterLUNthread);}

	std::string toString();
};
